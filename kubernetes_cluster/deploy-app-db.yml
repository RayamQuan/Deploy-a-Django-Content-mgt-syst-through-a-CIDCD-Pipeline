# To link a django docker container to a postgres service kubernetes, you need to follow these steps:
# Create a django docker image1 or use an existing one from the public registry.
# Create a django deployment that uses the image and sets the environment variables for connecting to postgres1.
# Create a django service that exposes the django port and allows external access1.
# In your django settings.py file, you can use DATABASE_HOST, DATABASE_NAME, DATABASE_USER and DATABASE_PASSWORD as the database parameters for connecting to postgres. For example:

# import os

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': os.environ.get('DATABASE_NAME'),
#         'USER': os.environ.get('DATABASE_USER'),
#         'PASSWORD': os.environ.get('DATABASE_PASSWORD'),
#         'HOST': os.environ.get('DATABASE_HOST'),
#     }
# }

---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "django"
  namespace: "default"
  labels:
    app: "django"
spec:
  replicas: 3 # number of pods to run at any given time
  selector:
    matchLabels:
      app: "django"  # label used to identify pod
  template:
    metadata:
      labels:
        app: "django"  # label used to identify pod 
    spec:
      containers:
      - name: "django"  # container name 
        image: "maiempire/django_project-app" # docker image of your django app 


---
apiVersion: "v1"
kind: "Service"
metadata:
  name: "django-service"
  namespace: "default"
  labels:
    app: "django"
spec:
  ports:
  - protocol: "TCP"
    port: "0.0.0.0:8000"
    targetPort: 80
  selector:
    app: "django"
  type: "LoadBalancer"
  loadBalancerIP: "44.197.200.90"


# To link a postgres container to an app container using kubernetes, you need to follow these steps:

# Create a postgres docker image1 or use an existing one from the public registry.
# Create a config map for storing postgres configurations1.
# Create a persistent storage volume for postgres data1.
# Create a postgres deployment that uses the image, config map and volume1.
# Create a postgres service that exposes the postgres port and allows other pods to access it1.
# In your app container, use the service name as the host name for connecting to postgres2.
# Here is an example script that shows how to do this:
# In your app container, you can use postgres-service as the host name for connecting to postgres. For example:

# import psycopg2
# conn = psycopg2.connect(host="postgres-service", database="mydb", user="myuser", password="mypass")

---
apiVersion: "v1"
kind: "ConfigMap"
metadata:
  name: "postgres-config"
  namespace: "default"
  labels:
    app: "postgres"
data:
  POSTGRES_DB: "postgres"
  POSTGRES_USER: "postgres"
  POSTGRES_PASSWORD: "postgres"


---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "postgres"
  namespace: "default"
  labels:
    app: "postgres"
spec:
  replicas: 3
  selector:
    matchLabels:
      app: "postgres"
  template:
    metadata:
      labels:
        app: "postgres"
    spec:
      containers:
      - name: "postgres"
        image: "postgres:13"
        env:
        - name: "POSTGRES_DB"
          valueFrom:
            configMapKeyRef:
              key: "POSTGRES_DB"
              name: "postgres-config"
        - name: "POSTGRES_USER"
          valueFrom:
            configMapKeyRef:
              key: "POSTGRES_USER"
              name: "postgres-config"
        - name: "POSTGRES_PASSWORD"
          valueFrom:
            configMapKeyRef:
              key: "POSTGRES_PASSWORD"
              name: "postgres-config"
        ports:
          - containerPort: 5432
            name: postgres
        volumeMounts:
          - name: postgres-storage
            mountPath: /var/lib/postgresql/db-data
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pv-claim

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  ports:
    - port: 5432
  selector:
    app: postgres

